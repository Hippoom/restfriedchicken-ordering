apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'maven'

group = 'com.restfriedchicken'
version = getVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    provided
}


sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        resources {
            srcDir 'src/test/features'
            srcDir 'src/test/data'
            srcDir 'src/test/sql'
        }

        compileClasspath += configurations.provided
    }
}

processResources {
    filter { String line -> line.replace("{version}", getVersion()) }
}

processTestResources {
    filter { String line -> line.replace("{version}", getVersion()) }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    provided 'org.projectlombok:lombok:1.14.8'

    compile "org.springframework.boot:spring-boot-starter-web:${project.springBootVersion}"
    compile 'org.springframework.hateoas:spring-hateoas:0.16.0.RELEASE'
    compile 'org.springframework.plugin:spring-plugin-core:1.1.0.RELEASE'
    compile 'com.google.guava:guava:18.0'


    //persistence
    compile 'org.springframework:spring-orm:4.1.6.RELEASE'
    compile 'org.hibernate:hibernate-core:4.3.8.Final'
    compile 'org.apache.commons:commons-dbcp2:2.1'
    testCompile 'org.hsqldb:hsqldb:2.3.2'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.2.1'
    testCompile 'org.dbunit:dbunit:2.4.9'
    testCompile ('org.flywaydb.flyway-test-extensions:flyway-spring-test:3.2.1') {
        exclude group: 'org.slf4j' //introducing multiple slf4j impl
    }



    testCompile "org.springframework.boot:spring-boot-starter-test:${project.springBootVersion}"
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.jayway.restassured:rest-assured:2.4.0'
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
    testCompile "info.cukes:cucumber-spring:${project.cucumberVersion}"
    testCompile "info.cukes:cucumber-junit:${project.cucumberVersion}"
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = 'com.restfriedchicken'
            repository(url: "http://localhost:8081/nexus/content/repositories/releases") {
                authentication(userName: "admin", password: "admin123")
            }
        }
    }
}

buildscript {

    ext {
        springBootVersion = '1.1.9.RELEASE'
        cucumberVersion = '1.2.2'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}")
    }
}

test {
    exclude 'com/restfriedchicken/features/*'
    exclude 'com/restfriedchicken/smoke/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task recordBinary() {
    doLast {
        def binary = new File("${buildDir}/libs/binary")
        binary.text = "${project.name}-${project.version}.jar"
    }
}


task runSmokeTest(type: Test) {
    // this task will be executed in isolation since all artifacts have been built and deployed
    dependsOn = []

    include "com/restfriedchicken/smoke/*"

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    outputs.upToDateWhen { false }//force to always rerun

    reports {
        html {
            destination = "$buildDir/build/reports/smoke"
        }
    }
}

task runAcceptanceTest(type: Test) {
    // this task will be executed in isolation since all artifacts have been built and deployed
    dependsOn = []

    include "com/restfriedchicken/features/*Features*"

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    outputs.upToDateWhen { false }//force to always rerun

    reports {
        html {
            destination = "$buildDir/build/reports/acceptance"
        }
    }
}

def getVersion() {
    return "0.1-" + getBuildNumber()
}

def getBuildNumber() {
    def revision = System.getenv('GO_REVISION')
    def pipelineCounter = System.getenv('GO_PIPELINE_COUNTER')
    def stageCounter = System.getenv('GO_STAGE_COUNTER')

    return "${revision}-${pipelineCounter}-${stageCounter}"
}